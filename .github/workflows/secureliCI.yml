# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: secureliCI

on:
  push:
    branches:
      - main
      - feature/**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Checkout Secureli Homebrew Repo
      uses: actions/checkout@v3
      with:
        repository: slalombuild/homebrew-secureli
        token: ${{ secrets.ADMIN_TOKEN_SASCHA }} # `GH_PAT` is a secret that contains your PAT
        path: homebrew-secureli
    - name: Validate Branch name
      run: ./scripts/get-current-branch.sh
    - name: Set up Python 3.9
      id: setup-python
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Set Up Project
      run: |
        pip install poetry
        poetry install
    - name: Run Tests
      run: |
        poetry run poe precommit
        poetry run poe coverage
        poetry run secureli yeti
    - name: Semantic Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        export GH_TOKEN=${{ secrets.ADMIN_TOKEN_SASCHA }}
        pip install python-semantic-release
        git config user.name github-actions
        git config user.email github-actions@github.com
        semantic-release publish
        # A NOOP run on feature branches
    - name: Verify Semantic Release
      if: github.ref != 'refs/heads/main'
      run: |
        export GH_TOKEN=${{ secrets.ADMIN_TOKEN_SASCHA }}
        pip install python-semantic-release
        git config user.name github-actions
        git config user.email github-actions@github.com
        semantic-release publish --noop

  deploy:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0
    - name: Checkout Secureli Homebrew Repo
      uses: actions/checkout@v3
      with:
        repository: slalombuild/homebrew-secureli
        token: ${{ secrets.ADMIN_TOKEN_SASCHA }} # `GH_PAT` is a secret that contains your PAT
        path: homebrew-secureli
    - name: Homebrew Formula Generation
      env:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN_SASCHA }}
      run: |
        pip install requests jinja2 poetry python-semantic-release
        export secureliVersion=$(semantic-release print-version --current)
        gh release download v$secureliVersion
        export secureliSha256=$(sha256sum ./secureli-${secureliVersion}.tar.gz | awk '{print $1}')
        git config --global user.email "secureli-automation@slalom.com"
        git config --global user.name "Secureli Automation"
        python ./scripts/get-secureli-dependencies.py
        cd homebrew-secureli
        git checkout -b "secureli-${secureliVersion}-formula-generation"
        git add ./Formula/secureli.rb
        git commit -m "Creating pull request with latest Secureli formula for version ${secureliVersion}"
        git push origin secureli-${secureliVersion}-formula-generation --repo https://github.com/slalombuild/homebrew-secureli.git
        gh pr create --title "Secureli Formula Automated Creation for version ${secureliVersion}" --body "Automated formula creation"
  test-osx:
    runs-on: macos-11
    steps:
    - name: Set up Homebrew
      run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    - name: Install GH
      run: brew install gh
    - name: Set up Secureli
      run: |
        echo $HOMEBREW_GITHUB_API_TOKEN > securelitoken.txt
        gh auth login --with-token --git-protocol https -h github.com < securelitoken.txt
        gh auth setup-git
        brew tap slalombuild/secureli
        HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALL_CLEANUP=1 HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install secureli
        rm -f securelitoken.txt
      env:
        HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.TAP_TOKEN }}
    - name: Checkout private tools
      uses: actions/checkout@v3
      with:
        repository: pypa/pip
        path: pip
    - name: Init Secureli
      run: cd pip && secureli init --yes && secureli scan
