# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
# These jobs are specifically designed to test the codebase
# and ensure that basic contributing from both mac and windows will work

name: Build & Test

on:
  push:
    branches-ignore: [ main ]
  workflow_call:


jobs:
  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Poetry
        run: pip install poetry

      - name: Set up Python 3.9
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'poetry'

      - name: Set Up Project
        run: |
          poetry install

      - name: Run Tests
        run: |
          poetry run poe precommit
        # Both of these lines error when run on a windows image, more research required as to why
          # poetry run poe coverage
          # poetry run secureli build


  build-linux:
    name: Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate Branch name
        run: ./scripts/get-current-branch.sh

      - name: Set up Poetry
        run: pip install poetry

      - name: Set up Python 3.9
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'poetry'

      - name: Set Up Project
        run: |
          poetry install

      - name: Install BATS for e2e tests
        uses: bats-core/bats-action@1.5.4

      - name: Run Tests
        env:
          BATS_LIBS_ROOT: /usr/lib
        run: |
          poetry run poe precommit
          poetry run poe coverage
          poetry run secureli build
          poetry run poe e2e


  build-homebrew:
    name: Homebrew
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/checkout@v4
        with:
          repository: slalombuild/homebrew-secureli
          path: homebrew-secureli
          ref: main
          fetch-depth: 0

      - name: Cache pip repo
        id: cache-pip-repo-mac
        uses: actions/cache@v4
        with:
          path: pip
          key: ${{ runner.os }}-repo-pip

      - uses: actions/checkout@v4
        if: steps.cache-pip-repo-mac.outputs.cache-hit != 'true'
        with:
          repository: pypa/pip
          path: pip
          fetch-depth: 0

      - name: Set up Poetry
        run: pip install poetry

      - name: Set up Python 3.9
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'poetry'

      - name: Set Up Project
        run: |
          poetry install

      - name: Build Homebrew
        env:
          HOMEBREW_NO_INSTALL_FROM_API: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
        run: |
          pip install requests jinja2
          python ./scripts/get-secureli-dependencies.py
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install --build-from-source --verbose ./homebrew-secureli/Formula/secureli.rb
          which secureli
          secureli init --yes

  secureli-release-noop:
    name: Release Test
    needs: [ build-linux, build-windows ]
    if: github.ref != 'refs/heads/main'
    runs-on: ubuntu-latest
    concurrency: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Python Semantic Release
        uses: relekang/python-semantic-release@master
        with:
          root_options: -vv --noop
